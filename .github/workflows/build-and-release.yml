name: RetroArch Custom Overlays - Build and Release

on:
  push:
    branches:
      - main

env:
  ARCHIVE_NAME: "retroarch_custom_overlays_r${{ github.run_number }}"

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup build environment
      run: mkdir -p dist

    - name: Create distribution archives
      run: |
        cd overlays
        zip -r "../dist/${{ env.ARCHIVE_NAME }}.zip" mahjong/

    - name: Verify build artifacts
      run: |
        echo "Build verification:"
        ls -la dist/
        echo ""
        echo "Archive contents:"
        for archive in dist/*.zip; do
          if [ -f "$archive" ]; then
            echo "=== $(basename "$archive") ==="
            unzip -l "$archive" | head -10
            echo ""
          fi
        done

    - name: Generate release body
      run: |
        # Generate added games list efficiently (only if games were added)
        added_games_list=$(git diff --name-only --diff-filter=A ${{ github.event.before }} ${{ github.event.after }} 2>/dev/null \
          | grep -E '^overlays/mahjong/mahjong_[^/]+\.cfg$' \
          | sed 's|.*/mahjong_\(.*\)\.cfg$|- \1|' \
          | sort)
        
        # Build release body content
        {
          echo "RELEASE_BODY<<RELEASE_END"
          echo "## Build Information"
          echo "- **Commit**: ${{ github.sha }}"
          echo "- **Branch**: ${{ github.ref_name }}"
          echo "- **Build Date**: ${{ github.event.head_commit.timestamp }}"
          echo ""
          echo "## Distribution Contents"
          echo "This release contains custom overlays for RetroArch mahjong games, optimized for MAME/FBNeo emulators. The archive includes:"
          echo "- CFG configuration files for each supported game"
          echo "- Overlay image assets (PNG files)"
          echo ""
          
          # Add games section only if there are new games
          if [ -n "$added_games_list" ]; then
            echo "## Added Games"
            echo "$added_games_list"
            echo ""
          fi
          
          echo "## Installation Instructions"
          echo "1. Download the attached ZIP archive"
          echo "2. Extract to your RetroArch overlays directory" 
          echo "3. Configure your games to use the appropriate overlay files"
          echo ""
          echo "--------"
          echo "*This release was automatically generated by GitHub Actions.*"
          echo "RELEASE_END"
        } >> $GITHUB_ENV

    - name: Create release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "build-${{ github.run_id }}"
        name: "Release #${{ github.run_number }}"
        body: ${{ env.RELEASE_BODY }}

    - name: Cleanup old releases
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Keep only the latest 5 releases to avoid clutter
        echo "Cleaning up old releases (keeping latest 5)..."
        releases=$(gh release list --limit 50 --json tagName,createdAt --jq 'map(select(.tagName | startswith("build-"))) | sort_by(.createdAt) | reverse | .[5:] | map(.tagName) | .[]')

        for tag in $releases; do
          if [ -n "$tag" ] && [ "$tag" != "build-${{ github.run_id }}" ]; then
            echo "Deleting release: $tag"
            gh release delete "$tag" --yes --cleanup-tag || echo "Failed to delete $tag (might not exist)"
          fi
        done
name: RetroArch Custom Overlays - Build and Release

on:
  push:
    branches:
      - main

env:
  ARCHIVE_NAME: "retroarch_custom_overlays_r${{ github.run_number }}"

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup build environment
      run: mkdir -p dist

    - name: Create distribution archives
      run: |
        zip -r "dist/${{ env.ARCHIVE_NAME }}.zip" overlays/mahjong/

    - name: Verify build artifacts
      run: |
        echo "Build verification:"
        ls -la dist/
        echo ""
        echo "Archive contents:"
        for archive in dist/*.zip; do
          if [ -f "$archive" ]; then
            echo "=== $(basename "$archive") ==="
            unzip -l "$archive" | head -10
            echo ""
          fi
        done

    - name: Create release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "build-${{ github.run_id }}"
        name: "Release #${{ github.run_number }}"
        body: |
          ## Build Information
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          - **Build Date**: ${{ github.event.head_commit.timestamp }}
          ## Distribution Contents
          This release contains custom overlays for RetroArch mahjong games, optimized for MAME/FBNeo emulators. The archive includes:
          - CFG configuration files for each supported game
          - Overlay image assets (PNG files)
          ## Installation Instructions
          1. Download the attached ZIP archive
          2. Extract to your RetroArch overlays directory
          3. Configure your games to use the appropriate overlay files

          ---
          *This release was automatically generated by GitHub Actions.*
        files: dist/${{ env.ARCHIVE_NAME }}.zip
        draft: false
        prerelease: false
        fail_on_unmatched_files: true

    - name: Cleanup old releases
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Keep only the latest 5 releases to avoid clutter
        echo "Cleaning up old releases (keeping latest 5)..."
        releases=$(gh release list --limit 50 --json tagName,createdAt --jq 'map(select(.tagName | startswith("build-"))) | sort_by(.createdAt) | reverse | .[5:] | map(.tagName) | .[]')

        for tag in $releases; do
          if [ -n "$tag" ] && [ "$tag" != "build-${{ github.run_id }}" ]; then
            echo "Deleting release: $tag"
            gh release delete "$tag" --yes --cleanup-tag || echo "Failed to delete $tag (might not exist)"
          fi
        done